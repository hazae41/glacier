{"version":3,"file":"use-retry.mjs","sources":["../../../../../../src/mods/react/hooks/blocks/use-retry.ts"],"sourcesContent":["import { useAutoRef } from \"libs/react.js\"\nimport { Query } from \"mods/react/types/query.js\"\nimport { useEffect, useRef } from \"react\"\n\nexport interface RetryOptions {\n  init?: number\n  base?: number\n  max?: number\n}\n\n/**\n * Retry request on error using exponential backoff\n * @see useInterval for interval based requests\n * @param query \n * @param options\n * @param options.init Initial timeout to be multiplied (in milliseconds)\n * @param options.base Exponent base (2 means the next timeout will be 2 times longer)\n * @param options.max Maximum count (3 means do not retry after 3 retries)\n * @see https://en.wikipedia.org/wiki/Exponential_backoff\n * @see https://en.wikipedia.org/wiki/Geometric_progression\n */\nexport function useRetry(query: Query, options: RetryOptions = {}) {\n  const { ready, skey, refetch, error } = query\n  const { init = 1000, base = 2, max = 3 } = options\n\n  const count = useRef(0)\n\n  useEffect(() => {\n    count.current = 0\n  }, [skey])\n\n  const refetchRef = useAutoRef(refetch)\n\n  useEffect(() => {\n    if (!ready) return\n\n    if (error === undefined) {\n      count.current = 0\n      return\n    }\n\n    if (count.current >= max) return\n    const ratio = base ** count.current\n\n    function f() {\n      count.current++\n      refetchRef.current()\n    }\n\n    const t = setTimeout(f, init * ratio)\n    return () => clearTimeout(t)\n  }, [ready, error])\n}"],"names":[],"mappings":";;;AAUA;;;;;;;;;;AAUG;AACa,SAAA,QAAQ,CAAC,KAAY,EAAE,OAA0B,EAAA;AAA1B,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAA0B,GAAA,EAAA,CAAA,EAAA;AACvD,IAAA,IAAA,KAAK,GAA2B,KAAK,MAAhC,EAAE,IAAI,GAAqB,KAAK,CAAA,IAA1B,EAAE,OAAO,GAAY,KAAK,CAAjB,OAAA,EAAE,KAAK,GAAK,KAAK,MAAV,CAAU;IACrC,IAAA,EAAA,GAAmC,OAAO,CAAA,IAA/B,EAAX,IAAI,GAAG,EAAA,KAAA,KAAA,CAAA,GAAA,IAAI,GAAA,EAAA,EAAE,EAAsB,GAAA,OAAO,CAArB,IAAA,EAAR,IAAI,GAAG,EAAA,KAAA,KAAA,CAAA,GAAA,CAAC,GAAA,EAAA,EAAE,EAAY,GAAA,OAAO,CAAZ,GAAA,EAAP,GAAG,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAC,GAAA,EAAA,CAAY;AAElD,IAAA,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;AAEvB,IAAA,SAAS,CAAC,YAAA;AACR,QAAA,KAAK,CAAC,OAAO,GAAG,CAAC,CAAA;AACnB,KAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;AAEV,IAAA,IAAM,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,CAAA;AAEtC,IAAA,SAAS,CAAC,YAAA;AACR,QAAA,IAAI,CAAC,KAAK;YAAE,OAAM;QAElB,IAAI,KAAK,KAAK,SAAS,EAAE;AACvB,YAAA,KAAK,CAAC,OAAO,GAAG,CAAC,CAAA;YACjB,OAAM;AACP,SAAA;AAED,QAAA,IAAI,KAAK,CAAC,OAAO,IAAI,GAAG;YAAE,OAAM;QAChC,IAAM,KAAK,GAAG,IAAA,CAAA,GAAA,CAAA,IAAI,EAAI,KAAK,CAAC,OAAO,CAAA,CAAA;AAEnC,QAAA,SAAS,CAAC,GAAA;YACR,KAAK,CAAC,OAAO,EAAE,CAAA;YACf,UAAU,CAAC,OAAO,EAAE,CAAA;SACrB;QAED,IAAM,CAAC,GAAG,UAAU,CAAC,CAAC,EAAE,IAAI,GAAG,KAAK,CAAC,CAAA;QACrC,OAAO,YAAA,EAAM,OAAA,YAAY,CAAC,CAAC,CAAC,CAAA,EAAA,CAAA;AAC9B,KAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;AACpB;;;;"}